{"version":3,"file":"side-channel-map-DfNa36Rb.js","sources":["../../node_modules/side-channel-map/index.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\nvar $Map = GetIntrinsic('%Map%', true);\n\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\nvar $mapGet = callBound('Map.prototype.get', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\nvar $mapSet = callBound('Map.prototype.set', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapHas = callBound('Map.prototype.has', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapDelete = callBound('Map.prototype.delete', true);\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */\nvar $mapSize = callBound('Map.prototype.size', true);\n\n/** @type {import('.')} */\nmodule.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {\n\t/** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\n\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t/** @type {Map<K, V> | undefined} */ var $m;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\tif ($m) {\n\t\t\t\tvar result = $mapDelete($m, key);\n\t\t\t\tif ($mapSize($m) === 0) {\n\t\t\t\t\t$m = void undefined;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($m) {\n\t\t\t\treturn $mapGet($m, key);\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($m) {\n\t\t\t\treturn $mapHas($m, key);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$m) {\n\t\t\t\t// @ts-expect-error TS can't handle narrowing a variable inside a closure\n\t\t\t\t$m = new $Map();\n\t\t\t}\n\t\t\t$mapSet($m, key, value);\n\t\t}\n\t};\n\n\t// @ts-expect-error TODO: figure out why TS is erroring here\n\treturn channel;\n};\n"],"names":["GetIntrinsic","require$$0","callBound","require$$1","inspect","require$$2","$TypeError","require$$3","$Map","$mapGet","$mapSet","$mapHas","$mapDelete","$mapSize","sideChannelMap","$m","channel","key","result","value"],"mappings":"iOAEA,IAAIA,EAAeC,EAAA,EACfC,EAAYC,EAAA,EACZC,EAAUC,EAAA,EAEVC,EAAaC,EAAA,EACbC,EAAOR,EAAa,QAAS,EAAI,EAGjCS,EAAUP,EAAU,oBAAqB,EAAI,EAE7CQ,EAAUR,EAAU,oBAAqB,EAAI,EAE7CS,EAAUT,EAAU,oBAAqB,EAAI,EAE7CU,EAAaV,EAAU,uBAAwB,EAAI,EAEnDW,EAAWX,EAAU,qBAAsB,EAAI,EAGnD,OAAAY,EAAiB,CAAC,CAACN,GAAmD,UAA6B,CAK7D,IAAIO,EAGrCC,EAAU,CACb,OAAQ,SAAUC,EAAK,CACtB,GAAI,CAACD,EAAQ,IAAIC,CAAG,EACnB,MAAM,IAAIX,EAAW,iCAAmCF,EAAQa,CAAG,CAAC,CAExE,EACE,OAAU,SAAUA,EAAK,CACxB,GAAIF,EAAI,CACP,IAAIG,EAASN,EAAWG,EAAIE,CAAG,EAC/B,OAAIJ,EAASE,CAAE,IAAM,IACpBA,EAAK,QAECG,CACX,CACG,MAAO,EACV,EACE,IAAK,SAAUD,EAAK,CACnB,GAAIF,EACH,OAAON,EAAQM,EAAIE,CAAG,CAE1B,EACE,IAAK,SAAUA,EAAK,CACnB,OAAIF,EACIJ,EAAQI,EAAIE,CAAG,EAEhB,EACV,EACE,IAAK,SAAUA,EAAKE,EAAO,CACrBJ,IAEJA,EAAK,IAAIP,GAEVE,EAAQK,EAAIE,EAAKE,CAAK,CACzB,GAIC,OAAOH,CACR","x_google_ignoreList":[0]}